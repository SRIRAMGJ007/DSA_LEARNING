LinkedList:
1) array to linkedlist
a)int[] array to singlylinkedlist
b)int[] array to doublylinkedlist
c) add more functionality like insert, remove, size

2) left rotate a linked list given n times
n = 2
1 2 3 4 5
2 3 4 5 1
3 4 5 1 2
time: O(N)
space: O(1)

3) find the middle of a singly linked list
5 4 3 1 2
5/2 = 2
middle : 3
5 4 3 1 2 1

middle: 3
approach 1: iterate total and stop in middle:
time: O(N)
space: O(1)

approach 2: fast and slow pointer (2 pointer)
[] - 1 billion
fast - 2 jump
slow - 1 jump
time: O(N)
space: O(1)


https://leetcode.com/problems/reverse-linked-list/
4) reverse a linked list
a) using recursion
time:
space:

b) using loop iteration
time:
space:

c) using stack // use collection
time:
space:

https://leetcode.com/problems/linked-list-cycle/
5) find if a linked list is looped or contains cycles.
time:
space: